services:
  nginx:
    image: openresty/openresty:alpine
    environment:
      - USERS_SERVICE=${USERS_SERVICE}
      - TWIT_SERVICE=${TWIT_SERVICE}
      - GRAPH_SERVICE=${GRAPH_SERVICE}
      - PUBLIC_SERVICE=${PUBLIC_SERVICE}
      - AUTH_HOST=${AUTH_SERVICE}
    volumes:
      - ./nginx/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf:ro
      - ./nginx/lua:/usr/local/openresty/nginx/lua:ro
    ports:
      - "8080:80"
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Rts28022007
      - POSTGRES_DB=twitter
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db-init/postgres:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: on-failure
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  cassandra:
    build:
      context: ./cassandra-custom
    image: cassandra-custom:4.1
    container_name: cassandra
    environment:
      CASSANDRA_CLUSTER_NAME: "TwitterCluster"
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    ports:
      - "9042:9042"
      - "7000:7000"
      - "7001:7001"
      - "7199:7199"
      - "9160:9160"
    volumes:
      # монтируем вашу папку со скриптами
      - ./db-init/cassandra:/docker-entrypoint-initdb.d:ro

  auth-service:
    build:
      context: ./AuthService
    env_file:
      - .env-docker
    depends_on:
      - postgres
      - redis
    container_name: auth-service
    ports:
      - "8000:8000"

  user-service:
    build:
      context: ./User_Service
    env_file:
      - .env-docker
    depends_on:
      - postgres
      - redis
    container_name: user-service
    ports:
      - "8001:8001"
  twitt-service:
    build:
      context: ./TwittService
    env_file:
      - .env-docker
    container_name: twitt-service
    depends_on:
      - kafka
      - cassandra
    ports:
      - "8002:8002"


volumes:
  pg_data:
  redis_data: